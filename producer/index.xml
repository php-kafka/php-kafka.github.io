<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Producer on Documentation php-kafka</title><link>https://php-kafka.github.io/producer/</link><description>Recent content in Producer on Documentation php-kafka</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Dec 2020 22:09:37 +0100</lastBuildDate><atom:link href="https://php-kafka.github.io/producer/index.xml" rel="self" type="application/rss+xml"/><item><title>__construct</title><link>https://php-kafka.github.io/producer/__construct/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/__construct/</guid><description>Description public function __construct(Configuration $configuration) {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf);</description></item><item><title>abortTransaction</title><link>https://php-kafka.github.io/producer/abortTransaction/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/abortTransaction/</guid><description>Description public function abortTransaction(int $timeoutMs): void {} This function should also be used to recover from non-fatal abortable transaction errors.
Any outstanding messages will be purged and fail with RD_KAFKA_RESP_ERR__PURGE_INFLIGHT or RD_KAFKA_RESP_ERR__PURGE_QUEUE.
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (Kafka\KafkaErrorException $e) { if ($e-&amp;gt;$transactionRequiresAbort()) { $producer-&amp;gt;abortTransaction(10000); } }</description></item><item><title>beginTransaction</title><link>https://php-kafka.github.io/producer/beginTransaction/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/beginTransaction/</guid><description>Description public function beginTransaction(): void {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); $producer-&amp;gt;initTransactions(10000); $producer-&amp;gt;beginTransaction(); // produce some messsages $producer-&amp;gt;commitTransaction(10000);</description></item><item><title>commitTransaction</title><link>https://php-kafka.github.io/producer/commitTransaction/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/commitTransaction/</guid><description>Description public function commitTransaction(int $timeoutMs): void {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); $producer-&amp;gt;initTransactions(10000); $producer-&amp;gt;beginTransaction(); // produce some messsages $producer-&amp;gt;commitTransaction(10000);</description></item><item><title>flush</title><link>https://php-kafka.github.io/producer/flush/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/flush/</guid><description>Description public function flush(int $timeoutMs): int {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); // produce some messsages $producer-&amp;gt;flush(10000);</description></item><item><title>initTransactions</title><link>https://php-kafka.github.io/producer/initTransactions/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/initTransactions/</guid><description>Description public function initTransactions(int $timeoutMs): void {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (Kafka\KafkaErrorException $e) { if ($e-&amp;gt;$transactionRequiresAbort()) { $producer-&amp;gt;abortTransaction(10000); } }</description></item><item><title>purge</title><link>https://php-kafka.github.io/producer/purge/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/purge/</guid><description>Description public function purge(int $purgeFlags): int {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); // produce some messsages $producer-&amp;gt;purge(RD_KAFKA_PURGE_F_QUEUE);</description></item></channel></rss>