<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation php-kafka</title><link>https://php-kafka.github.io/</link><description>Recent content on Documentation php-kafka</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Dec 2020 22:09:37 +0100</lastBuildDate><atom:link href="https://php-kafka.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>__construct</title><link>https://php-kafka.github.io/consumer/__construct/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/__construct/</guid><description>Description public function __construct(Configuration $configuration) {} Get a consumer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf);</description></item><item><title>__construct</title><link>https://php-kafka.github.io/producer/__construct/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/__construct/</guid><description>Description public function __construct(Configuration $configuration) {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf);</description></item><item><title>abortTransaction</title><link>https://php-kafka.github.io/producer/abortTransaction/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/abortTransaction/</guid><description>Description public function abortTransaction(int $timeoutMs): void {} This function should also be used to recover from non-fatal abortable transaction errors.
Any outstanding messages will be purged and fail with RD_KAFKA_RESP_ERR__PURGE_INFLIGHT or RD_KAFKA_RESP_ERR__PURGE_QUEUE.
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (Kafka\KafkaErrorException $e) { if ($e-&amp;gt;$transactionRequiresAbort()) { $producer-&amp;gt;abortTransaction(10000); } }</description></item><item><title>assign</title><link>https://php-kafka.github.io/consumer/assign/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/assign/</guid><description>Description public function assign(array $topics): void {} Atomic assignment of partitions to consume.
The new partitions will replace the existing assignment.
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $consumer-&amp;gt;assign( [ new Kafka\TopicPartition(&amp;#39;test-topic&amp;#39;, 1, 3000), new Kafka\TopicPartition(&amp;#39;test-topic&amp;#39;, 2, 3009) ] );</description></item><item><title>beginTransaction</title><link>https://php-kafka.github.io/producer/beginTransaction/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/beginTransaction/</guid><description>Description public function beginTransaction(): void {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); $producer-&amp;gt;initTransactions(10000); $producer-&amp;gt;beginTransaction(); // produce some messsages $producer-&amp;gt;commitTransaction(10000);</description></item><item><title>close</title><link>https://php-kafka.github.io/consumer/close/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/close/</guid><description>Description public function close(): void {} Close down the Consumer. This call will block until
the consumer has revoked its assignment, calling the rebalance callback
if it is configured, committed offsets to broker, and left the consumer group. The maximum blocking time is roughly limited to session.timeout.ms.
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $consumer-&amp;gt;close();</description></item><item><title>commit</title><link>https://php-kafka.github.io/consumer/commit/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/commit/</guid><description>Description /** * @throws Kafka\Exception */ public function commit($messageOrOffsets): void {} Commit offsets synchronously, block until offsets are
committed or the commit fails and an exception is thrown.
Parameter details If null is passed, latest offsets for the current assignment will be committed Ìf a Kafka\Message is passed, commit offset for a single topic+partition based on the message If an array of Kafka\TopicPartition is passed, commit offsets for the provided list of partitions Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.</description></item><item><title>commitAsync</title><link>https://php-kafka.github.io/consumer/commitAsync/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/commitAsync/</guid><description>Description public function commitAsync($messageOrOffsets): void {} Commit offsets asynchronously
Parameter details If null is passed, latest offsets for the current assignment will be committed Ìf a Kafka\Message is passed, commit offset for a single topic+partition based on the message If an array of Kafka\TopicPartition is passed, commit offsets for the provided list of partitions Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $message = $consumer-&amp;gt;consume(20000); if (RD_KAFKA_RESP_ERR_NO_ERROR !</description></item><item><title>commitTransaction</title><link>https://php-kafka.github.io/producer/commitTransaction/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/commitTransaction/</guid><description>Description public function commitTransaction(int $timeoutMs): void {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); $producer-&amp;gt;initTransactions(10000); $producer-&amp;gt;beginTransaction(); // produce some messsages $producer-&amp;gt;commitTransaction(10000);</description></item><item><title>consume</title><link>https://php-kafka.github.io/consumer/consume/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/consume/</guid><description>Description public function consume(int $timeoutMs): Message {} Consume message(s) (will also get error events and triggers callbacks)
Registered callbacks will be automaically called rebalanceCallback, logCallback, etc.
On error $message-&amp;gt;err will not be RD_KAFKA_ERR_NO_ERROR but contain the acutal error code.
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $message = $consumer-&amp;gt;consume(20000); An application should call consume() at regular intervals, even if no messages
are expected, to serve any queued callbacks waiting to be called.</description></item><item><title>dump</title><link>https://php-kafka.github.io/configuration/dump/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/configuration/dump/</guid><description>Description public function dump(): array {} Dumps the current configuration
Example $conf = new Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;); $conf-&amp;gt;dump();</description></item><item><title>flush</title><link>https://php-kafka.github.io/producer/flush/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/flush/</guid><description>Description public function flush(int $timeoutMs): int {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); // produce some messsages $producer-&amp;gt;flush(10000);</description></item><item><title>getAssignment</title><link>https://php-kafka.github.io/consumer/getAssignment/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/getAssignment/</guid><description>Description public function getAssignment(): array {} Returns the current partition assignment
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $consumer-&amp;gt;assign( [ new Kafka\TopicPartition(&amp;#39;test-topic&amp;#39;, 1, 3000), new Kafka\TopicPartition(&amp;#39;test-topic&amp;#39;, 2, 3009) ] ); var_dump($consumer-&amp;gt;getAssignment());</description></item><item><title>getCommittedOffsets</title><link>https://php-kafka.github.io/consumer/getCommittedOffsets/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/getCommittedOffsets/</guid><description>Description public function getCommittedOffsets(array $topics, int $timeoutMs): array {} Returns the committed offsets for topics and partitions for a consumer group
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0); var_dump($consumer-&amp;gt;getCommittedOffsets([$topicPartition], 10000));</description></item><item><title>getMetadata</title><link>https://php-kafka.github.io/consumer/getMetadata/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/getMetadata/</guid><description>Description function getMetadata(bool $allTopics, int $timeoutMs, ConsumerTopic $topic = null): Metadata {} Get metadata for all topics or a single topic
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $topicHandle = $consumer-&amp;gt;getTopicHandle(&amp;#39;test-topic&amp;#39;); $singleTopicMetadata = $consumer-&amp;gt;metadata(true, $topicHandle, 10000);</description></item><item><title>getOffsetPositions</title><link>https://php-kafka.github.io/consumer/getOffsetPositions/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/getOffsetPositions/</guid><description>Description public function getOffsetPositions(array $topics): array {} The offset field of each requested partition will be set to the offset of the last consumed message + 1
If there was no previous message RD_KAFKA_OFFSET_INVALID will be returned
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0); $topicPartitionsWithOffsets = $consumer-&amp;gt;getOffsetPositions([$topicPartition]));</description></item><item><title>getSubscription</title><link>https://php-kafka.github.io/consumer/getSubscription/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/getSubscription/</guid><description>Description public function getSubscription(): array {} Return topic names to which the consumer is currently subscribed to
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $consumer-&amp;gt;subscribe([&amp;#39;test-topic&amp;#39;]); var_dump($consumer-&amp;gt;getSubscription());</description></item><item><title>getTopicHandle</title><link>https://php-kafka.github.io/consumer/getTopicHandle/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/getTopicHandle/</guid><description>Description public function getTopicHandle(string $topic): ConsumerTopic {} Get a topic handle for a given topic name. A topic handle is needed
for example to query metadata from the broker
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $topicHandle = $consumer-&amp;gt;getTopicHandle(&amp;#39;test-topic&amp;#39;); // use the topic handle for further calls, e.g. to query metadata $singleTopicMetadata = $consumer-&amp;gt;metadata(true, $topicHandle, 10000);</description></item><item><title>initTransactions</title><link>https://php-kafka.github.io/producer/initTransactions/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/initTransactions/</guid><description>Description public function initTransactions(int $timeoutMs): void {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); try { $producer-&amp;gt;initTransactions(10000); } catch (Kafka\KafkaErrorException $e) { if ($e-&amp;gt;$transactionRequiresAbort()) { $producer-&amp;gt;abortTransaction(10000); } }</description></item><item><title>kafka_err2name</title><link>https://php-kafka.github.io/functions/kafka_err2name/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/functions/kafka_err2name/</guid><description>Description function kafka_err2name(int $errorCode): string {} Returns the name of the error
Example php&amp;gt; echo kafka_err2name(88); UNSTABLE_OFFSET_COMMIT</description></item><item><title>kafka_err2str</title><link>https://php-kafka.github.io/functions/kafka_err2str/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/functions/kafka_err2str/</guid><description>Description function kafka_err2str(int $errorCode): string {} Returns the error message of an error code
Example php&amp;gt; echo kafka_err2str(88); Broker: There are unstable offsets that need to be cleared</description></item><item><title>kafka_get_err_descs</title><link>https://php-kafka.github.io/functions/kafka_get_err_descs/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/functions/kafka_get_err_descs/</guid><description>Description function kafka_get_err_descs(): array {} Returns a full list of error codes and their description
Result structure [ [ &amp;#34;code&amp;#34; =&amp;gt; 88, &amp;#34;name&amp;#34; =&amp;gt; &amp;#34;UNSTABLE_OFFSET_COMMIT&amp;#34;, &amp;#34;desc&amp;#34; =&amp;gt; &amp;#34;Broker: There are unstable offsets that need to be cleared&amp;#34; ], ... ]</description></item><item><title>kafka_offset_tail</title><link>https://php-kafka.github.io/functions/kafka_offset_tail/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/functions/kafka_offset_tail/</guid><description>Description function kafka_offset_tail(int $offset): int {} Returns an offset value that is $offset before the tail of the topic</description></item><item><title>kafka_thread_cnt</title><link>https://php-kafka.github.io/functions/kafka_thread_cnt/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/functions/kafka_thread_cnt/</guid><description>Description function kafka_thread_cnt(): int {} Retrieve the current number of threads in use by librdkafka</description></item><item><title>offsetsForTimes</title><link>https://php-kafka.github.io/consumer/offsetForTimes/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/offsetForTimes/</guid><description>Description public function offsetsForTimes(array $topicPartitions, int $timeoutMs): array {} Look up the offsets for the given partitions by timestamp.
The returned offset for each partition is the earliest offset whose
timestamp is greater than or equal to the given timestamp in the
corresponding partition.
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0, strtotime(&amp;#34;-1 week&amp;#34;)); $offsetsOneWeekAgo = $consumer-&amp;gt;offsetForTimes([$topicPartition], 10000);</description></item><item><title>purge</title><link>https://php-kafka.github.io/producer/purge/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/producer/purge/</guid><description>Description public function purge(int $purgeFlags): int {} Get a producer instance
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $producer = new Kafka\Producer($conf); // produce some messsages $producer-&amp;gt;purge(RD_KAFKA_PURGE_F_QUEUE);</description></item><item><title>queryWatermarkOffsets</title><link>https://php-kafka.github.io/consumer/queryWatermarkOffsets/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/queryWatermarkOffsets/</guid><description>Description public function queryWatermarkOffsets(string $topic, int $partition, int &amp;amp;$low, int &amp;amp;$high, int $timeoutMs): void {} Query broker for low (oldest) and high (newest) offsets for a partition
Example $low = 0; $high = 0; $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $topicPartition = new TopicPartition(&amp;#39;test-topic&amp;#39;, 0, strtotime(&amp;#34;-1 week&amp;#34;)); $consumer-&amp;gt;queryWatermarkOffsets(&amp;#39;test-topic&amp;#39;, 0, int &amp;amp;$low, int &amp;amp;$high, 10000);</description></item><item><title>Release v1.0.0</title><link>https://php-kafka.github.io/whats-new/release-1.0.0/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/whats-new/release-1.0.0/</guid><description>Initial release</description></item><item><title>set</title><link>https://php-kafka.github.io/configuration/set/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/configuration/set/</guid><description>Description public function set(string $name, string $value): void {} Set a configuration value
Example $conf = new Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;auto.offset.reset&amp;#39;, &amp;#39;earliest&amp;#39;);</description></item><item><title>setDrMsgCb</title><link>https://php-kafka.github.io/configuration/setDrMsgCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/configuration/setDrMsgCb/</guid><description>Description public function setDrMsgCb(callable $callback): void {} Set a message delivery report callback
This callback is called exactly once per message, indicating if
the message was succesfully delivered or permanently failed delivery
Example $conf = new Kafka\Configuration(); $conf-&amp;gt;setDrMsgCb( function (Producer $kafka, Message $message) { if (RD_KAFKA_RESP_ERR_NO_ERROR !== $message-&amp;gt;err) { $errorStr = rd_kafka_err2str($message-&amp;gt;err); echo sprintf(&amp;#39;Message FAILED (%s, %s) to send with payload =&amp;gt; %s&amp;#39;, $message-&amp;gt;err, $errorStr, $message-&amp;gt;payload) . PHP_EOL; } else { // message successfully delivered echo sprintf(&amp;#39;Message sent SUCCESSFULLY with payload =&amp;gt; %s&amp;#39;, $message-&amp;gt;payload) .</description></item><item><title>setErrorCb</title><link>https://php-kafka.github.io/configuration/setErrorCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/configuration/setErrorCb/</guid><description>Description public function setErrorCb(callable $callback): void {} Gets triggered for every error that occurs in librdkafka, keep in mind
that non-critical errors will be retried by libdrkafka
Example $conf = new Kafka\Configuration(); $conf-&amp;gt;setErrorCb( function (Kafka\Kafka $kafka, $errorCode, $reason) { //do something } );</description></item><item><title>setLogCb</title><link>https://php-kafka.github.io/configuration/setLogCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/configuration/setLogCb/</guid><description>Description public function setLogCb(callable $callback): void {} Set a log callback
You will get events according to the log_level setting
Example $conf = new Kafka\Configuration(); $conf-&amp;gt;setLogCb( function (Kafka\Kafka $kafka, int $level, string $facility, string $message) { //do something } );</description></item><item><title>setOffsetCommitCb</title><link>https://php-kafka.github.io/configuration/setOffsetCommitCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/configuration/setOffsetCommitCb/</guid><description>Description public function setOffsetCommitCb(callable $callback): void {} Set offset commit callback for use with consumer groups.
The results of automatic or manual offset commits will be scheduled
for this callback. If no partitions had valid offsets to commit
this callback will be called with err == RD_KAFKA_RESP_ERR__NO_OFFSET
which is not to be considered an error.
Example $conf = new Kafka\Configuration(); $conf-&amp;gt;setOffsetCommitCb( function (Kafka\Kafka $kafka, int $errorCode, array $topicPartition) { if (RD_KAFKA_RESP_ERR_NO_ERROR === $errorCode) { echo &amp;#39;Commit was successful&amp;#39;; } else { echo &amp;#39;Commit failed&amp;#39;; } } );</description></item><item><title>setRebalanceCb</title><link>https://php-kafka.github.io/configuration/setRebalanceCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/configuration/setRebalanceCb/</guid><description>Description public function setRebalanceCb(callable $callback): void {} Set a rebalance callback for use with coordinated consumer group balancing.
The $errorCode is set to either RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS
or RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS and &amp;lsquo;partitions&amp;rsquo; contains
the full partition set that was either assigned or revoked.
Registering a rebalance callback turns off the automatic partition
assignment/revocation and instead delegates that responsibility
to the application&amp;rsquo;s callback.
Example $conf = new Kafka\Configuration(); $conf-&amp;gt;setRebalanceCb( function (Kafka\Consumer $kafka, int $errorCode, array $partitions = null) { case RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS: $kafka-&amp;gt;assign($partitions); break; case RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS: if ($manual_commits) { // Optional explicit manual commit $kafka-&amp;gt;commit($partitions); } //revoke partitions $kafka-&amp;gt;assign(NULL); break; default: // handle arbitrary rebalancing failure .</description></item><item><title>setStatsCb</title><link>https://php-kafka.github.io/configuration/setStatsCb/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/configuration/setStatsCb/</guid><description>Description public function setStatsCb(callable $callback): void {} Set a statistics callback
The statistics callback is triggered every statistics.interval.ms (needs to be configured separately).
Example $conf = new Kafka\Configuration(); $conf-&amp;gt;setStatsCb( function (Kafka\Kafka $kafka, string $json, int $jsonLength) { //do something } );</description></item><item><title>subscribe</title><link>https://php-kafka.github.io/consumer/subscribe/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/subscribe/</guid><description>Description public function subscribe(array $topics): void {} Subscribe to one or more topics (regexp also supported).
Any previous subscription will be unassigned and unsubscribed first.
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $consumer-&amp;gt;subscribe([&amp;#39;test-topic&amp;#39;]);</description></item><item><title>unsubscribe</title><link>https://php-kafka.github.io/consumer/unsubscribe/</link><pubDate>Sun, 27 Dec 2020 22:09:37 +0100</pubDate><guid>https://php-kafka.github.io/consumer/unsubscribe/</guid><description>Description public function unsubscribe(): void {} Unsubscribe from the current subscriptions
Example $conf = Kafka\Configuration(); $conf-&amp;gt;set(&amp;#39;metadata.broker.list&amp;#39;, &amp;#39;kafka:9092&amp;#39;); $consumer = new Kafka\Consumer($conf); $consumer-&amp;gt;subscribe([&amp;#39;test-topic&amp;#39;]); $consumer-&amp;gt;unsubscribe();</description></item></channel></rss>